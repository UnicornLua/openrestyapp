
worker_processes    1;
events {
  worker_connections    512;
}

http {
  server {
    listen      80;
    server_name localhost;
    location /httpconst {
      content_by_lua_block {
        ngx.say(ngx.HTTP_OK)
        ngx.say(ngx.HTTP_NOT_FOUND)
        ngx.say(ngx.HTTP_GET)
        ngx.say(ngx.HTTP_POST)
      }
    }
    location /httpbaseinfo {
      rewrite_by_lua_block {
        local len = 12345
        ngx.ctx.len = tonumber(len)
      }
      content_by_lua_block {
        -- 判断请求是否未内部请求
        local internal = ngx.req.is_internal()
        ngx.say(internal)
        -- 记录请求处理的时间
        local cost = ngx.now() - ngx.req.start_time()
        ngx.say(cost)
        -- 请求头
        local head = ngx.req.raw_header()
        ngx.say(head)
        -- 获取上下文在不同程序中共享数据，
        -- 开销较大，建议少用
        ngx.say(ngx.ctx.len)
      }
    }
    location /httpreqline {
      rewrite_by_lua_block { 
        -- 获取版本号
        ngx.say(ngx.req.http_version())
        -- 获取请求方法
        local method = ngx.req.get_method()
        ngx.say(method)
        -- 修改请求的方法
        ngx.req.set_method(ngx.HTTP_POST)
        ngx.say(ngx.req.get_method())
        -- 获取 uri
        ngx.say(ngx.var.uri)
        -- 编码, 解码 一些非 URI 字符
        local us = "/api/poem?name=Alex&password=@#!$123124"
        local eu = ngx.escape_uri(us)
        ngx.say(eu)
        local du =  ngx.unescape_uri(eu)
        ngx.say(du)

        -- 获取请求中参数
        if method == "GET" then
          -- get_uri_args(max args) 这里传入的数值表示可以解析的最大的键值对数量
          -- 获取的请求参数是一个表，
          local args = ngx.req.get_uri_args(10)
          for k, v in pairs(args) do
            ngx.say(("%s -- %s"):format(k, v))
          end
        elseif method == "POST" then
          -- 必须要先读取请求体获取到参数
          ngx.req.read_body()
          -- 获取到请求参数是一个表
          local args = ngx.req.get_post_args(10)
          for k, v in pairs(args) do
            -- 使用表单的时候接收的是键值对
            -- 使用json传递参数的时候，
                -- key 就是json 的本体，
                -- value 是一个 bool 类型的参数
            ngx.say(("%s -- %s"):format(k, v))
          end
        end
      }
    }
    location /httpreqhead {
      rewrite_by_lua_block {
        -- 获取处理请求头
        local headers = ngx.req.get_headers()
        for k, v in pairs(headers) do
          ngx.say(("%s -> %s"):format(k, v))
        end
        -- 修改(添加)请求头
        ngx.req.set_header("accept", "firefox")
        headers = ngx.req.get_headers()
        ngx.say(headers.accept)

        -- 删除某些请求头信息
        ngx.req.clear_header("host")
        headers = ngx.req.get_headers()
        ngx.say(headers.host)
      }
    }
    location /httpreqbody {
      rewrite_by_lua_block {
        ngx.req.read_body()
        -- 获取原始的清华体数据
        local data = ngx.req.get_body_data()
        ngx.say("data: " .. data)
        -- 修改请求体数据
        local cjson = require("cjson.safe")
        ngx.req.set_body_data(cjson.encode({name="alex", age=78}))
        data = ngx.req.get_body_data()
        ngx.say(data)
      }
    }
    location /httpreshead {
      content_by_lua_block {
        ngx.header['service'] = "openresty"
        ngx.header.date = "2022-08-19"
        ngx.header.field = 'xxx'
      }
      header_filter_by_lua_block {
        if ngx.header.etag then 
          ngx.header.etag = nil
        end
        ngx.header['Cache-control'] = "max-age=300"
      }
    }
    location /httpresbody {
      content_by_lua_block {
        local data = {"alex", 'maria', "scott"}
        ngx.say(data)
        for _, v in ipairs(data) do
          ngx.print("-" ..v)
          ngx.flush(true)
        end
      }
      body_filter_by_lua_block {
        ngx.arg[1] = ngx.arg[1] .. "xx"
      }
    }
    location /httpflowcontrol {
      rewrite_by_lua_block {
        ngx.redirect("http://www.baidu.com")
      }
    }
    location /httpexec {
      rewrite_by_lua_block {
        ngx.exec("/httpflowcontrol")
      }
    }
    location /httpexit {
      rewrite_by_lua_block {
        -- 需要 name 参数才能访问
        -- 可以进行一些参数过滤，请求拦截
        if not ngx.var.arg_name then
          ngx.exit(400)
        else 
          ngx.redirect("/httpflowcontrol")
        end
      }
    }
  }
}


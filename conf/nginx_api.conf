worker_processes    1;
events {
  worker_connections    512;
}

http {
  server {
    listen      80;
    server_name localhost;
    location /hello {
      set_by_lua_block $a {
        ngx.log(ngx.ERR, "set_by_lua")
      }
      rewrite_by_lua_block {
        ngx.log(ngx.ERR, "rewrite_by_lua")
      }
      access_by_lua_block {
        ngx.log(ngx.ERR, "access_by_lua")
      }
      content_by_lua_block {
        ngx.print("hello")
      }
      header_filter_by_lua_block {
        ngx.log(ngx.ERR, "header_filter_by_lua")
      }
      body_filter_by_lua_block {
        ngx.log(ngx.ERR, "body_filter_by_lua")
      }
      log_by_lua_block {
        ngx.log(ngx.ERR, "log_by_lua")
      }
    }
    location /test {
      content_by_lua_block {
        ngx.say(ngx.config.nginx_version)
        ngx.say(ngx.config.nginx_configure())
      }
    }

    location /time {
      content_by_lua_block {
        ngx.sleep(3)
        ngx.say(ngx.today())
        ngx.say(ngx.localtime())
        ngx.say(ngx.utctime())
        ngx.say(ngx.time())
        ngx.say(ngx.now())
        ngx.say("-----------------------------------")
        local sec = 1515338760
        ngx.say(ngx.http_time(sec))
        local timestr = "Mon, 15 Aug 2022 22:03:10 GMT"
        ngx.say(ngx.parse_http_time(timestr))
      }
    }
    location /coder {
      content_by_lua_block {
        local encode = ngx.encode_base64("hello world")
        ngx.say(encode)
        local decode = ngx.decode_base64(encode)
        ngx.say(decode)
        ngx.say("-----------------------------------")
        local cjson = require("cjson.safe")
        local json = cjson.encode({name="Alex", age=28})
        ngx.say(json)
        local tab = cjson.decode(json);
        ngx.say(tab.name)
      }
    }
    location /regexp {
      content_by_lua_block {
        -- 字符的匹配, 匹配到的表
        local str = "aBcdaB-123-456"
        local m = ngx.re.match(str, [[\d{3}]], jo)
        ngx.say(type(m))
        ngx.say(m[0])

        ngx.say("------------------------------------")
        -- 字符串的查找 (返回找到的位置的起始结束坐标)
        local from, to = ngx.re.find(str, [[\d+]], jo)
        local f, t = ngx.re.find(str, "123", jo)
        ngx.say(string.sub(str, from, to))
        ngx.say(string.sub(str, f, t))
        ngx.say("------------------------------------")
        -- 字符串的替换(ab | cd 全部替换，返回替换后的数据与替换成功的次数)
        ngx.say(ngx.re.gsub(str, "aB|cd", "oo", jo))
        ngx.say("------------------------------------")
        -- 字符串的切分, 切分后返回一个biao(数组)
        local ngx_split = require("ngx.re").split
        local s = ngx_split(str, "-")
        ngx.say("s: " .. s[1])
      }
    }
    location /cache {
      content_by_lua_block {
        ngx.say("openresty start cache .....")
        local cache = require("resty.lrucache")
        -- we need to initialize the cache on lua module level so
        -- that it can be shared by all the requests served by each nginx worker process.
        local c = cache.new(200);
        if not c then
           return error("failed to create the cacahe" .. (err or "unknown"))
        end
        c:set("dog", "dog bak but not hack", 50)
        c:set("cat", 64)
        ngx.say("dog", c:get("dog"))
      }
    }
  }
}

